/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddRating
 * @category generated
 */
export type AddRatingInstructionArgs = {
  rating: number
}
/**
 * @category Instructions
 * @category AddRating
 * @category generated
 */
export const addRatingStruct = new beet.BeetArgsStruct<
  AddRatingInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['rating', beet.u8],
  ],
  'AddRatingInstructionArgs'
)
/**
 * Accounts required by the _addRating_ instruction
 *
 * @property [_writable_] merchant
 * @property [_writable_] state
 * @property [_writable_, **signer**] signer
 * @category Instructions
 * @category AddRating
 * @category generated
 */
export type AddRatingInstructionAccounts = {
  merchant: web3.PublicKey
  state: web3.PublicKey
  signer: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addRatingInstructionDiscriminator = [
  178, 122, 141, 23, 38, 141, 48, 29,
]

/**
 * Creates a _AddRating_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddRating
 * @category generated
 */
export function createAddRatingInstruction(
  accounts: AddRatingInstructionAccounts,
  args: AddRatingInstructionArgs,
  programId = new web3.PublicKey('8mDhNcko1rByfWLzVTuddx386JFwFnD3oDPWV2pzBckN')
) {
  const [data] = addRatingStruct.serialize({
    instructionDiscriminator: addRatingInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.merchant,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
