/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CnftIdentifier, cnftIdentifierBeet } from '../types/CnftIdentifier'

/**
 * @category Instructions
 * @category InitializeMerchantWithReferrer
 * @category generated
 */
export type InitializeMerchantWithReferrerInstructionArgs = {
  nftIdentifier: CnftIdentifier
}
/**
 * @category Instructions
 * @category InitializeMerchantWithReferrer
 * @category generated
 */
export const initializeMerchantWithReferrerStruct = new beet.BeetArgsStruct<
  InitializeMerchantWithReferrerInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['nftIdentifier', cnftIdentifierBeet],
  ],
  'InitializeMerchantWithReferrerInstructionArgs'
)
/**
 * Accounts required by the _initializeMerchantWithReferrer_ instruction
 *
 * @property [_writable_] merchantAccount
 * @property [_writable_] userAccount
 * @property [_writable_, **signer**] user
 * @property [_writable_] state
 * @property [_writable_] referrerAccount
 * @property [] referrer
 * @category Instructions
 * @category InitializeMerchantWithReferrer
 * @category generated
 */
export type InitializeMerchantWithReferrerInstructionAccounts = {
  merchantAccount: web3.PublicKey
  userAccount: web3.PublicKey
  user: web3.PublicKey
  state: web3.PublicKey
  systemProgram?: web3.PublicKey
  referrerAccount: web3.PublicKey
  referrer: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initializeMerchantWithReferrerInstructionDiscriminator = [
  247, 231, 64, 66, 86, 196, 61, 168,
]

/**
 * Creates a _InitializeMerchantWithReferrer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeMerchantWithReferrer
 * @category generated
 */
export function createInitializeMerchantWithReferrerInstruction(
  accounts: InitializeMerchantWithReferrerInstructionAccounts,
  args: InitializeMerchantWithReferrerInstructionArgs,
  programId = new web3.PublicKey('8mDhNcko1rByfWLzVTuddx386JFwFnD3oDPWV2pzBckN')
) {
  const [data] = initializeMerchantWithReferrerStruct.serialize({
    instructionDiscriminator:
      initializeMerchantWithReferrerInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.merchantAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.referrerAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.referrer,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
